#line 2 "lexer.cpp"

#line 4 "lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 66
#define YY_END_OF_BUFFER 67
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[504] =
    {   0,
        0,    0,   67,   64,   37,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   62,   64,   64,
       64,   64,   63,   63,   63,   63,   63,   63,   64,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   64,   64,   64,    1,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   62,   64,   64,   64,   64,   63,   63,   63,
       63,   63,   63,   64,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       64,   64,   61,    0,    0,   38,   44,   46,    0,   54,

       41,   39,   40,   52,   62,   55,   42,   62,    0,    0,
        0,   62,    0,    0,    0,   62,   62,    0,   56,   58,
       60,   59,   57,   45,   63,    0,    0,   63,   63,   63,
       63,   48,    0,   63,   11,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   15,   63,   19,   30,
       63,   63,   27,   63,   63,   63,   63,   63,   63,   63,
       47,   65,    1,    0,   61,   65,   65,   44,   46,   65,
       54,   41,   39,   40,   52,   62,   55,   42,   62,   65,
       65,   65,   62,   65,   65,   65,   62,   62,   65,   56,
       58,   60,   59,   57,   45,   63,   65,   65,   63,   63,

       63,   63,   48,   65,   63,   11,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   15,   63,   19,
       30,   63,   63,   27,   63,   63,   63,   63,   63,   63,
       63,   47,    0,    0,    0,    0,   51,   62,    0,   43,
       62,    0,    0,   62,   62,    0,   62,    0,   62,    0,
       49,   50,   63,   63,   63,   28,   63,   63,   63,   63,
       63,   63,   36,    3,   63,   63,   63,   63,   18,   63,
       63,   63,   63,   63,   26,   63,   63,   63,   21,   63,
       63,   63,   65,   65,   65,   65,   51,   62,   65,   43,
       62,   65,   65,   62,   62,   65,   62,   65,   62,   65,

       49,   50,   63,   63,   63,   28,   63,   63,   63,   63,
       63,   63,   36,    3,   63,   63,   63,   63,   18,   63,
       63,   63,   63,   63,   26,   63,   63,   63,   21,   63,
       63,   63,    0,    0,    0,    0,    0,    0,    0,    0,
       62,    0,   62,   63,   34,   32,   63,   63,   63,   63,
       63,   63,   16,   17,   63,   63,    9,   63,   63,   63,
       63,    4,   63,   63,   63,   23,   63,   65,   65,   65,
       65,   65,   65,   65,   65,   62,   65,   62,   63,   34,
       32,   63,   63,   63,   63,   63,   63,   16,   17,   63,
       63,    9,   63,   63,   63,   63,    4,   63,   63,   63,

       23,   63,    0,    0,    0,    0,   33,   63,    2,   29,
        5,   35,   63,   63,   63,   63,   63,   63,   63,    8,
       63,   20,   31,   65,   65,   65,   65,   33,   63,    2,
       29,    5,   35,   63,   63,   63,   63,   63,   63,   63,
        8,   63,   20,   31,   53,    0,    0,    0,    0,    0,
        0,   14,   63,   24,   63,   12,   10,   25,   63,    7,
       53,   65,   65,   65,   65,   65,   65,   14,   63,   24,
       63,   12,   10,   25,   63,    7,    0,    0,   63,   22,
       63,   65,   65,   63,   22,   63,    0,    0,    6,   13,
       65,   65,    6,   13,    0,    0,   65,   65,   53,   53,

       53,   53,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    4,    5,    6,    1,    7,    8,    9,    1,
        1,   10,   11,    1,   12,   13,   14,   15,   16,   17,
       17,   17,   17,   17,   17,   18,   18,    1,    1,   19,
       20,   21,    1,   22,   23,   24,   23,   23,   25,   26,
       27,   27,   27,   28,   27,   27,   27,   29,   30,   27,
       27,   31,   27,   32,   33,   27,   27,   34,   27,   27,
       35,   36,   35,   37,   38,    1,   39,   40,   41,   42,

       43,   44,   45,   46,   47,   28,   48,   49,   50,   51,
       52,   53,   27,   54,   55,   56,   57,   27,   58,   59,
       60,   27,   61,   62,   61,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[63] =
    {   0,
        1,    2,    3,    1,    4,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    5,    5,    5,    5,    1,    1,
        1,    1,    5,    5,    5,    5,    6,    6,    6,    6,
        6,    6,    6,    6,    1,    7,    1,    5,    5,    5,
        5,    5,    5,    5,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        1,    1
    } ;

static const flex_int16_t yy_base[518] =
    {   0,
        0,   62, 1065, 2060, 2060, 1043, 1053, 1058, 1030, 1026,
     1038,  115, 1017,  106,  113,  118,  126,  155,  114, 1016,
      116,  995,    0,  143,  962,  150,  950,  140,  982,  133,
      947,  109,  134,  104,  170,  154,  168,  952,  936,  930,
      174,  195,  152,  143,  929,  959,  941,    0, 2060,  193,
      940,  946,  207,  925,  921,  932,  182,  911,  194,  210,
      185,  227,  256,  210,  910,  211,  904,  299,  361,  202,
      298,  244,  237,  902,  380,  284,  390,  397,  415,  238,
      428,  478,  421,  440,  457,  467,  301,  476,  488,  505,
      907,  898, 2060,  211,  914, 2060, 2060, 2060,  241,  894,

     2060, 2060, 2060, 2060,  522,  891, 2060,  235,  538,  220,
      553, 2060,  341,  869,  331,  562,  576,  440,  881, 2060,
     2060, 2060,  879, 2060,    0,  883,  873,  257,  827,  822,
      805, 2060,  484,  817,  102,  815,  809,  810,  793,  215,
      233,  799,  787,  773,  334,  769,    0,  765,    0,    0,
      767,  231,    0,  757,  757,  739,  721,  725,  715,  723,
     2060,    0, 2060,  245,    0,  292,  293,    0,    0,  317,
      745,    0,    0,    0,    0,  592,  744,    0,  362,  572,
      315,  611,    0,  488,  659,  567,  621,  627,  645,  742,
        0,    0,    0,  741,    0,  594,  748,  751,  373,  681,

      682,  683,    0,  651,  684,  700,  719,  720,  736,  737,
      738,  739,  774,  775,  780,  665,  791,  792,  794,  811,
      827,  830,  832,  846,  848,  851,  865,  884,  886,  903,
      904,    0,  328,  744,  747,  341, 2060,  911,  663, 2060,
      432,  301,  792,  935,  508,  392,  711,  696,  949,  953,
     2060, 2060,  672,  675,  673,    0,  668,  657,  660,  656,
      639,  616,    0,    0,  627,  615,  614,  617,    0,  604,
      613,  599,  610,  598,    0,  586,  577,  566,    0,  572,
      572,  564,  943,  602,  593,  977,    0,  978,  982,    0,
      557,  362,  992, 1002, 1007,  401,    0,  559, 1016, 1010,

        0,    0, 1030, 1033, 1043, 1042, 1061, 1044, 1062, 1094,
     1097, 1103, 1108, 1114, 1132, 1115, 1135, 1151, 1156, 1168,
     1175, 1188, 1193, 1195, 1204, 1207, 1232, 1243, 1245, 1259,
     1250, 1270,  460,  579,  473,  581,  565,  532,  859,  697,
     1040, 1073, 1305,  519,    0,    0,  507,  516,  493,  500,
      488,  484,    0,    0,  467,  469,    0,  477,  459,  470,
      438,    0,  441,  414,  420,    0,  419, 1267,  444, 1280,
      445,  434, 1322, 1329, 1336, 1335, 1114, 1361, 1351, 1305,
     1357, 1375, 1376, 1382, 1392, 1393, 1403, 1413, 1430, 1432,
     1444, 1449, 1450, 1451, 1468, 1461, 1463, 1492, 1503, 1509,

     1516, 1519,  427,  862,  789,  416,    0,  358,    0,    0,
        0,    0,  362,  347,  352,  345,  335,  349,  343,    0,
      313,    0,    0,  354, 1390, 1524,  342, 1536, 1557, 1560,
     1563, 1569, 1576, 1588, 1601, 1607, 1613, 1619, 1620, 1638,
     1632, 1659, 1673, 1675, 2060,  970,  976, 1159,  897, 1260,
     1166,    0,  271,    0,  265,    0,    0,    0,  263,    0,
        0, 1551, 1686, 1698, 1706, 1715, 1723, 1726, 1735, 1740,
     1747, 1759, 1764, 1778, 1788, 1791, 1596, 1799,  194,    0,
      137, 1826, 1835, 1815, 1842, 1844, 1801, 1847,    0,    0,
     1875, 1892, 1881, 1882, 1218, 1672, 1904, 1913, 1850, 1895,

     1929, 1941, 2060, 1977, 1980, 1986, 1993, 2000,  135, 2007,
     2013, 2019, 2026, 2033, 2039, 2045, 2052
    } ;

static const flex_int16_t yy_def[518] =
    {   0,
      503,  503,  503,  503,  503,  503,  503,  504,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  505,  505,  505,  505,  505,  505,  503,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  503,  503,  506,  503,  506,
      506,  506,  507,  506,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  506,  506,  506,  506,  508,  508,   69,
       69,   69,   69,  506,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
      506,  506,  503,  503,  504,  503,  503,  503,  503,  503,

      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  509,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  505,  503,  503,  505,  505,  505,
      505,  503,  503,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      503,  506,  503,  506,  506,  506,  507,  506,  506,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  506,   62,
      506,  506,  506,  506,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  506,  506,   69,  506,  506,   69,   69,

       69,   69,  506,  506,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,  506,  510,  503,  503,  511,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  509,  509,  503,  503,
      503,  503,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  512,  506,  506,  513,  506,  506,  506,  506,
      506,  506,  506,  506,  506,  506,  185,  185,  506,  506,

      506,  506,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,  510,  503,  510,  503,  503,  511,  511,  511,
      503,  503,  503,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  512,  506,  512,
      506,  506,  513,  513,  513,  506,  506,  506,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,

       69,   69,  503,  514,  515,  503,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  506,  516,  517,  506,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,  503,  514,  514,  514,  515,  515,
      515,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      506,  516,  516,  516,  517,  517,  517,   69,   69,   69,
       69,   69,   69,   69,   69,   69,  514,  515,  505,  505,
      505,  516,  517,   69,   69,   69,  514,  515,  505,  505,
      516,  517,   69,   69,  514,  515,  516,  517,  514,  515,

      516,  517,    0,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503
    } ;

static const flex_int16_t yy_nxt[2123] =
    {   0,
        4,    5,    4,    6,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   18,   18,   19,   20,
       21,   22,   23,   23,   23,   24,   23,   23,   25,   23,
       26,   27,   28,   23,    4,    4,   29,   23,   30,   31,
       32,   33,   34,   35,   36,   23,   37,   23,   38,   23,
       39,   40,   41,   42,   23,   43,   28,   44,   23,   45,
       46,   47,   48,   49,   50,   51,   52,   53,   54,   55,
       56,   57,   58,   59,   60,   61,   62,   63,   63,   63,
       64,   65,   66,   67,   68,   68,   68,   69,   68,   68,
       70,   68,   71,   72,   73,   68,   48,   48,   74,   68,

       75,   76,   77,   78,   79,   80,   81,   68,   82,   68,
       83,   68,   84,   85,   86,   87,   68,   88,   73,   89,
       68,   90,   91,   92,  100,  103,  104,  105,  105,  105,
      105,  106,  119,  120,  101,  122,  123,  107,  108,  247,
      109,  109,  109,  109,  126,  133,  133,  126,  127,  110,
      111,  127,  141,  112,  126,  113,  257,  138,  127,  114,
      139,  258,  142,  115,  133,  110,  133,  108,  111,  116,
      117,  117,  117,  128,  126,  128,  140,  113,  127,  111,
      133,  129,  112,  134,  114,  490,  133,  135,  158,  159,
      136,  171,  118,  128,  163,  164,  128,  111,  177,  126,

      128,  172,  146,  127,  178,  157,  162,  133,   96,   95,
      162,  147,  154,  174,  175,  233,  143,  148,  149,  234,
      128,  144,  150,  145,  176,  176,  176,  176,  190,  191,
      193,  194,  196,  155,  241,  241,  489,  156,  128,  179,
      196,  180,  180,  180,  180,  235,  163,  164,  162,  236,
      181,  182,  162,  201,  183,  196,  184,  242,  263,  111,
      185,  126,  112,  264,  186,  127,  181,  196,  179,  182,
      187,  188,  188,  188,  196,  196,  196,  111,  184,  265,
      182,  274,  196,  183,  214,  185,  275,  266,  162,  215,
      196,  216,  162,  189,   96,   95,  283,  202,  182,  162,

      284,  481,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  204,  196,  241,  241,  162,  162,  162,
      162,  285,  196,  199,  480,  286,  199,  479,  196,  291,
      291,  196,  334,  162,  162,  162,  196,  208,  126,  226,
      335,  199,  127,  227,  199,  109,  109,  109,  109,  339,
      461,  196,  292,  340,  196,  245,  245,  245,  461,  162,
      162,  162,  335,  460,  162,  197,  162,  162,  162,  198,
      162,  162,  162,  162,  162,  340,  291,  291,  246,  162,
      162,  162,  162,  459,  162,  270,  182,  458,  162,  183,
      457,  199,  204,  456,  162,  162,  162,  162,  162,  200,

      455,  162,  454,  196,  182,  162,  245,  245,  245,  204,
      196,  196,  453,  452,  199,  295,  295,  295,  196,  162,
      196,  162,  162,  162,  445,  162,  196,  196,  196,  162,
      205,  445,  162,  196,  206,  196,  162,  207,  209,  211,
      204,  210,  426,  196,  162,  196,  241,  241,  162,  425,
      196,  196,  424,  196,  117,  117,  117,  117,  196,  222,
      423,  162,  422,  212,  334,  162,  196,  421,  196,  242,
      196,  162,  335,  213,  196,  162,  217,  334,  196,  204,
      162,  196,  162,  420,  162,  335,  162,  196,  204,  419,
      204,  223,  162,  196,  335,  196,  162,  196,  105,  105,

      105,  105,  295,  295,  295,  225,  196,  335,  196,  162,
      224,  418,  417,  162,  196,  416,  196,  415,  196,  414,
      196,  218,  245,  245,  245,  296,  196,  219,  220,  228,
      413,  196,  221,  229,  230,  196,  238,  238,  238,  238,
      339,  196,  412,  196,  340,  246,  111,  411,  410,  112,
      108,  231,  109,  109,  109,  109,  409,  243,  196,  239,
      408,  407,  111,  243,  111,  112,  340,  244,  244,  244,
      244,  291,  291,  405,  108,  115,  249,  117,  117,  117,
      111,  180,  180,  180,  180,  404,  111,  403,  108,  112,
      117,  117,  117,  117,  292,  162,  162,  372,  162,  250,

      111,  162,  162,  112,  111,  162,  288,  288,  288,  288,
      371,  162,  367,  118,  243,  293,  182,  366,  111,  183,
      365,  293,  364,  162,  196,  294,  294,  294,  294,  289,
      162,  363,  196,  179,  182,  299,  188,  188,  188,  179,
      362,  188,  188,  188,  188,  182,  361,  196,  183,  360,
      359,  182,  358,  357,  183,  356,  355,  354,  300,  188,
      188,  188,  188,  182,  189,  176,  176,  176,  176,  182,
      353,  352,  293,  297,  297,  297,  297,  238,  238,  238,
      238,  297,  297,  297,  297,  162,  162,  162,  162,  162,
      162,  162,  162,  351,  350,  196,  298,  297,  297,  297,

      297,  297,  297,  196,  162,  339,  349,  348,  162,  340,
      347,  196,  196,  196,  196,  346,  320,  345,  196,  196,
      196,  196,  196,  162,  162,  306,  344,  162,  162,  303,
      196,  340,  304,  503,  196,  196,  196,  196,  196,  305,
      162,  162,  162,  162,  162,  162,  162,  162,  248,  196,
      196,  337,  336,  196,  307,  170,  166,  309,  196,  308,
      302,  301,  310,  290,  287,  282,  196,  196,  196,  196,
      281,  280,  196,  196,  311,  196,  196,  196,  162,  162,
      279,  313,  162,  162,  162,  315,  314,  312,  162,  196,
      196,  196,  196,  316,  278,  162,  162,  450,  162,  162,

      162,  451,  162,  277,  196,  196,  244,  244,  244,  244,
      196,  276,  196,  196,  317,  162,  273,  272,  196,  162,
      271,  196,  196,  451,  196,  318,  269,  196,  196,  196,
      196,  162,  196,  319,  162,  162,  162,  268,  162,  267,
      162,  196,  321,  262,  196,  196,  322,  196,  261,  196,
      162,  260,  162,  259,  162,  162,  162,  196,  256,  162,
      196,  255,  196,  406,  196,  196,  447,  339,  196,  162,
      196,  340,  254,  162,  448,  253,  196,   99,  196,  323,
      196,  196,  324,  196,  196,  196,  196,  325,  162,  196,
      162,   94,  162,  340,  162,  196,  448,  327,  252,  196,

      251,  196,  326,  196,  196,  450,  248,  162,  162,  451,
      240,  162,  162,  237,  196,   96,  196,  232,  196,  204,
      328,  203,  196,  195,  196,  238,  238,  238,  238,  192,
      173,  451,  330,  196,  196,  111,  170,  196,  112,  196,
      169,  196,  196,  329,  168,  333,  332,  369,  239,  341,
      341,  341,  341,  111,  166,  370,  196,  196,  331,  165,
      161,  108,  112,  249,  117,  117,  117,  343,  117,  117,
      117,  133,  342,  111,  447,  160,  112,  370,  162,  338,
      447,  162,  448,  153,  477,  374,  250,  152,  448,  375,
      151,  111,  288,  288,  288,  288,  288,  288,  288,  288,

      137,  132,  182,  131,  448,  183,  294,  294,  294,  294,
      448,  375,  162,  130,  124,  289,  376,  376,  376,  376,
      182,  295,  295,  295,  378,  188,  188,  188,  179,  183,
      299,  188,  188,  188,  162,  121,  102,  162,  162,  377,
      182,  162,   99,  183,  296,   98,  162,  162,  162,   97,
      162,  162,  162,  300,  341,  341,  341,  341,  182,   96,
      196,   94,   93,  196,  503,  162,  162,  112,  196,  162,
      162,  196,  196,  196,  196,  380,  503,  342,  503,  503,
      196,  196,  196,  196,  379,  381,  196,  341,  341,  341,
      341,  196,  196,  503,  383,  196,  196,  196,  162,  196,

      196,  162,  162,  382,  503,  162,  503,  162,  384,  503,
      503,  162,  162,  503,  196,  196,  162,  503,  162,  162,
      503,  503,  162,  162,  196,  503,  503,  196,  376,  376,
      376,  376,  385,  196,  503,  196,  162,  503,  196,  162,
      162,  196,  503,  162,  196,  196,  196,  196,  503,  503,
      196,  386,  196,  196,  503,  162,  196,  389,  387,  162,
      162,  196,  196,  447,  162,  196,  503,  196,  196,  503,
      196,  448,  162,  196,  450,  388,  162,  390,  451,  162,
      503,  196,  503,  162,  503,  196,  196,  503,  196,  391,
      503,  503,  162,  448,  196,  503,  162,  162,  196,  162,

      451,  162,  503,  162,  196,  196,  196,  503,  162,  196,
      503,  162,  162,  196,  393,  162,  503,  392,  196,  503,
      503,  196,  499,  196,  503,  196,  196,  503,  196,  503,
      448,  196,  395,  196,  196,  503,  162,  196,  503,  394,
      162,  196,  196,  396,  503,  196,  196,  162,  196,  162,
      503,  162,  448,  162,  162,  503,  503,  196,  162,  503,
      196,  397,  196,  162,  478,  503,  503,  162,  450,  333,
      196,  369,  451,  196,  162,  196,  503,  503,  162,  370,
      196,  196,  333,  196,  369,  196,  398,  503,  196,  196,
      503,  503,  370,  503,  451,  401,  196,  196,  196,  399,

      196,  370,  162,  196,  503,  503,  503,  400,  196,  162,
      503,  503,  196,  162,  370,  162,  503,  108,  402,  343,
      117,  117,  117,  196,  338,  503,  162,  503,  503,  111,
      374,  338,  112,  427,  375,  196,  503,  374,  338,  503,
      162,  375,  250,  196,  374,  503,  503,  111,  375,  376,
      376,  376,  376,  503,  503,  162,  375,  162,  196,  162,
      503,  162,  183,  375,  162,  162,  503,  503,  503,  503,
      375,  162,  377,  179,  503,  378,  188,  188,  188,  162,
      162,  196,  503,  162,  162,  182,  162,  196,  183,  196,
      162,  446,  446,  428,  463,  196,  162,  162,  300,  503,

      162,  162,  464,  182,  196,  196,  196,  162,  503,  503,
      196,  162,  196,  196,  196,  503,  430,  162,  503,  503,
      196,  162,  196,  196,  464,  162,  503,  503,  429,  196,
      196,  196,  503,  196,  162,  196,  162,  431,  162,  432,
      162,  196,  503,  196,  503,  196,  196,  433,  162,  434,
      503,  196,  162,  162,  162,  162,  196,  162,  162,  162,
      196,  503,  196,  503,  503,  162,  196,  162,  196,  162,
      196,  162,  162,  503,  196,  503,  162,  503,  503,  196,
      196,  196,  196,  196,  435,  196,  503,  196,  437,  196,
      503,  196,  436,  196,  503,  503,  162,  196,  196,  196,

      162,  196,  196,  196,  438,  503,  196,  162,  503,  439,
      503,  162,  440,  162,  196,  503,  196,  162,  503,  503,
      162,  196,  196,  162,  162,  449,  449,  162,  503,  503,
      196,  503,  466,  196,  441,  503,  467,  503,  503,  196,
      162,  196,  503,  503,  162,  196,  196,  196,  503,  196,
      503,  443,  446,  446,  196,  463,  442,  196,  467,  162,
      444,  162,  196,  464,  162,  162,  196,  162,  162,  196,
      503,  162,  196,  162,  196,  503,  503,  162,  503,  503,
      162,  503,  503,  503,  162,  464,  162,  196,  503,  196,
      196,  503,  162,  196,  503,  196,  162,  503,  196,  196,

      447,  196,  503,  503,  487,  162,  196,  196,  448,  162,
      196,  162,  468,  196,  196,  162,  196,  162,  196,  503,
      503,  162,  196,  162,  162,  503,  196,  162,  162,  196,
      448,  196,  503,  503,  503,  503,  162,  196,  469,  196,
      162,  196,  162,  196,  503,  196,  162,  503,  503,  196,
      196,  196,  503,  503,  196,  471,  470,  196,  474,  503,
      196,  472,  196,  162,  503,  503,  196,  162,  196,  503,
      196,  503,  196,  196,  473,  503,  196,  162,  475,  162,
      500,  162,  503,  162,  451,  196,  503,  446,  446,  196,
      463,  196,  503,  503,  482,  503,  503,  196,  464,  446,

      446,  503,  463,  196,  503,  196,  451,  449,  449,  476,
      464,  196,  196,  196,  466,  503,  449,  449,  467,  483,
      464,  162,  503,  466,  449,  449,  196,  467,  196,  503,
      162,  466,  464,  162,  162,  467,  503,  503,  503,  162,
      467,  162,  503,  162,  162,  503,  503,  503,  162,  467,
      162,  162,  503,  503,  503,  162,  196,  467,  162,  503,
      503,  503,  503,  162,  196,  196,  503,  162,  162,  503,
      196,  503,  162,  196,  503,  503,  503,  196,  196,  196,
      503,  503,  162,  503,  503,  196,  162,  503,  196,  196,
      503,  484,  162,  196,  196,  162,  162,  196,  503,  162,

      196,  503,  196,  488,  503,  447,  485,  450,  196,  495,
      503,  451,  196,  448,  503,  503,  196,  196,  196,  162,
      503,  196,  503,  162,  503,  503,  486,  446,  446,  196,
      463,  196,  503,  451,  491,  448,  449,  449,  464,  492,
      503,  196,  503,  466,  196,  196,  162,  467,  162,  503,
      162,  496,  162,  196,  447,  450,  503,  493,  477,  451,
      464,  162,  448,  503,  503,  503,  503,  503,  196,  467,
      162,  503,  196,  503,  196,  503,  446,  446,  503,  463,
      196,  451,  196,  497,  448,  162,  162,  464,  503,  162,
      162,  503,  494,  449,  449,  196,  498,  196,  503,  478,

      466,  503,  503,  450,  467,  446,  446,  451,  501,  464,
      162,  196,  196,  503,  449,  449,  464,  503,  503,  196,
      196,  502,  503,  503,  503,  467,  467,  162,  503,  451,
      446,  446,  503,  463,  196,  196,  503,  482,  464,  162,
      503,  464,  449,  449,  503,  483,  503,  467,  162,  466,
      503,  503,  503,  467,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  464,  162,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  467,  162,   95,   95,   95,
       95,   95,   95,   95,  125,  125,  162,  503,  503,  162,
      162,  162,  162,  167,  167,  167,  167,  167,  167,  167,

      196,  503,  503,  196,  196,  196,  196,  333,  503,  333,
      333,  333,  333,  338,  503,  338,  503,  338,  338,  368,
      503,  368,  368,  368,  368,  368,  373,  503,  373,  373,
      373,  373,  373,  446,  446,  446,  446,  446,  446,  449,
      449,  449,  449,  449,  449,  462,  462,  462,  462,  462,
      462,  462,  465,  465,  465,  465,  465,  465,  465,    3,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,

      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503
    } ;

static const flex_int16_t yy_chk[2123] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,   12,   14,   14,   15,   15,   15,
       15,   16,   19,   19,   12,   21,   21,   16,   17,  509,
       17,   17,   17,   17,   28,   30,   33,   24,   28,   17,
       17,   24,   34,   17,   26,   17,  135,   32,   26,   17,
       32,  135,   34,   17,   43,   17,   36,   18,   17,   18,
       18,   18,   18,   24,   35,   26,   33,   17,   35,   18,
       37,   24,   18,   30,   17,  481,   41,   30,   44,   44,
       30,   57,   18,   26,   50,   50,   24,   18,   61,   42,

       35,   57,   36,   42,   61,   43,   70,   42,   53,   53,
       70,   37,   41,   59,   59,   94,   35,   37,   37,   94,
       42,   35,   37,   35,   60,   60,   60,   60,   64,   64,
       66,   66,   70,   42,  110,  110,  479,   42,   42,   62,
       70,   62,   62,   62,   62,   99,  164,  164,   72,   99,
       62,   62,   72,   70,   62,   70,   62,  110,  140,  108,
       62,  128,  108,  140,   62,  128,   62,   73,   63,   62,
       63,   63,   63,   63,   72,   73,   80,  108,   62,  141,
       63,  152,   72,   63,   80,   62,  152,  141,   76,   80,
       73,   80,   76,   63,  167,  167,  166,   72,   63,   68,

      166,  459,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   87,   76,  242,  242,   68,   68,   68,
       68,  170,   76,   71,  455,  170,   87,  453,   71,  181,
      181,   87,  233,   68,   68,   68,   71,   76,  145,   87,
      233,   71,  145,   87,   87,  115,  115,  115,  115,  236,
      427,   71,  181,  236,   87,  113,  113,  113,  424,   68,
       68,   69,  233,  421,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,  236,  292,  292,  113,   69,
       69,   69,   69,  419,   75,  145,  179,  418,   75,  179,
      417,   69,   75,  416,   77,   69,   69,   69,   77,   69,

      415,   78,  414,  199,  179,   78,  246,  246,  246,   78,
       75,  199,  413,  408,   69,  296,  296,  296,   75,   79,
       77,   69,   69,   79,  406,   83,  199,   78,   77,   83,
       75,  403,   81,   75,   75,   78,   81,   75,   77,   78,
       81,   77,  372,   77,   84,   79,  241,  241,   84,  371,
       78,   83,  369,   79,  118,  118,  118,  118,   81,   83,
      367,   85,  365,   79,  333,   85,   81,  364,   79,  241,
       84,   86,  333,   79,   83,   86,   81,  335,   84,   86,
       88,   81,   82,  363,   88,  335,   82,   85,   88,  361,
       82,   84,   89,   84,  333,   85,   89,   86,  133,  133,

      133,  133,  184,  184,  184,   86,   88,  335,   82,   90,
       85,  360,  359,   90,   88,  358,   82,  356,   89,  355,
       86,   82,  245,  245,  245,  184,   89,   82,   82,   88,
      352,   82,   82,   89,   89,   90,  105,  105,  105,  105,
      338,   89,  351,   90,  338,  245,  105,  350,  349,  105,
      109,   90,  109,  109,  109,  109,  348,  111,   90,  105,
      347,  344,  109,  111,  105,  109,  338,  111,  111,  111,
      111,  291,  291,  337,  116,  109,  116,  116,  116,  116,
      109,  186,  186,  186,  186,  336,  116,  334,  117,  116,
      117,  117,  117,  117,  291,  180,  298,  285,  196,  116,

      117,  180,  196,  117,  116,  180,  176,  176,  176,  176,
      284,  180,  282,  117,  111,  182,  176,  281,  117,  176,
      280,  182,  278,  180,  196,  182,  182,  182,  182,  176,
      180,  277,  196,  187,  176,  187,  187,  187,  187,  188,
      276,  188,  188,  188,  188,  187,  274,  196,  187,  273,
      272,  188,  271,  270,  188,  268,  267,  266,  187,  189,
      189,  189,  189,  187,  188,  204,  204,  204,  204,  188,
      265,  262,  182,  185,  185,  185,  185,  239,  239,  239,
      239,  185,  185,  185,  185,  200,  201,  202,  205,  200,
      201,  202,  205,  261,  260,  216,  185,  185,  185,  185,

      185,  185,  185,  216,  206,  340,  259,  258,  206,  340,
      257,  200,  201,  202,  205,  255,  216,  254,  216,  200,
      201,  202,  205,  207,  208,  205,  253,  207,  208,  200,
      206,  340,  201,  248,  200,  201,  202,  205,  206,  202,
      209,  210,  211,  212,  209,  210,  211,  212,  247,  207,
      208,  235,  234,  206,  206,  198,  197,  207,  208,  206,
      194,  190,  208,  177,  171,  160,  209,  210,  211,  212,
      159,  158,  207,  208,  209,  210,  211,  212,  213,  214,
      157,  211,  213,  214,  215,  212,  211,  210,  215,  209,
      210,  211,  212,  212,  156,  217,  218,  405,  219,  217,

      218,  405,  219,  155,  213,  214,  243,  243,  243,  243,
      215,  154,  213,  214,  213,  220,  151,  148,  215,  220,
      146,  217,  218,  405,  219,  214,  144,  213,  214,  217,
      218,  221,  219,  215,  222,  221,  223,  143,  222,  142,
      223,  220,  217,  139,  217,  218,  219,  219,  138,  220,
      224,  137,  225,  136,  224,  226,  225,  221,  134,  226,
      222,  131,  223,  339,  220,  221,  404,  339,  222,  227,
      223,  339,  130,  227,  404,  129,  224,  127,  225,  222,
      221,  226,  223,  222,  224,  223,  225,  223,  228,  226,
      229,  126,  228,  339,  229,  227,  404,  226,  123,  224,

      119,  225,  225,  227,  226,  449,  114,  230,  231,  449,
      106,  230,  231,  100,  228,   95,  229,   92,  227,   91,
      227,   74,  228,   67,  229,  238,  238,  238,  238,   65,
       58,  449,  229,  230,  231,  238,   56,  228,  238,  229,
       55,  230,  231,  228,   54,  283,  231,  283,  238,  244,
      244,  244,  244,  238,   52,  283,  230,  231,  230,   51,
       47,  249,  244,  249,  249,  249,  249,  250,  250,  250,
      250,   46,  244,  249,  446,   45,  249,  283,  283,  286,
      447,  286,  446,   40,  447,  286,  249,   39,  447,  286,
       38,  249,  288,  288,  288,  288,  289,  289,  289,  289,

       31,   29,  288,   27,  446,  288,  293,  293,  293,  293,
      447,  286,  286,   25,   22,  288,  294,  294,  294,  294,
      288,  295,  295,  295,  300,  300,  300,  300,  299,  294,
      299,  299,  299,  299,  303,   20,   13,  304,  303,  294,
      299,  304,   11,  299,  295,   10,  306,  305,  308,    9,
      306,  305,  308,  299,  341,  341,  341,  341,  299,    8,
      303,    7,    6,  304,    3,  307,  309,  341,  303,  307,
      309,  304,  306,  305,  308,  304,    0,  341,    0,    0,
      306,  305,  308,  303,  303,  305,  304,  342,  342,  342,
      342,  307,  309,    0,  308,  306,  305,  308,  310,  307,

      309,  311,  310,  307,    0,  311,    0,  312,  309,    0,
        0,  312,  313,    0,  307,  309,  313,    0,  314,  316,
        0,    0,  314,  316,  310,    0,    0,  311,  377,  377,
      377,  377,  310,  312,    0,  311,  315,    0,  313,  317,
      315,  312,    0,  317,  314,  316,  313,  310,    0,    0,
      311,  311,  314,  316,    0,  318,  312,  316,  312,  318,
      319,  313,  315,  448,  319,  317,    0,  314,  316,    0,
      315,  448,  320,  317,  451,  315,  320,  317,  451,  321,
        0,  318,    0,  321,    0,  315,  319,    0,  317,  318,
        0,    0,  322,  448,  319,    0,  322,  323,  320,  324,

      451,  323,    0,  324,  318,  321,  320,    0,  325,  319,
        0,  326,  325,  321,  321,  326,    0,  320,  322,    0,
        0,  320,  495,  323,    0,  324,  322,    0,  321,    0,
      495,  323,  323,  324,  325,    0,  327,  326,    0,  322,
      327,  322,  325,  324,    0,  326,  323,  328,  324,  329,
        0,  328,  495,  329,  331,    0,    0,  325,  331,    0,
      326,  326,  327,  330,  450,    0,    0,  330,  450,  368,
      327,  368,  450,  328,  332,  329,    0,    0,  332,  368,
      331,  328,  370,  329,  370,  327,  327,    0,  331,  330,
        0,    0,  370,    0,  450,  331,  328,  330,  329,  328,

      332,  368,  368,  331,    0,    0,    0,  330,  332,  380,
        0,    0,  330,  380,  370,  370,    0,  343,  332,  343,
      343,  343,  343,  332,  373,    0,  373,    0,    0,  343,
      373,  374,  343,  374,  373,  380,    0,  374,  375,    0,
      375,  374,  343,  380,  375,    0,    0,  343,  375,  376,
      376,  376,  376,    0,    0,  379,  373,  373,  380,  379,
        0,  381,  376,  374,  374,  381,    0,    0,    0,    0,
      375,  375,  376,  378,    0,  378,  378,  378,  378,  382,
      383,  379,    0,  382,  383,  378,  384,  381,  378,  379,
      384,  425,  425,  379,  425,  381,  385,  386,  378,    0,

      385,  386,  425,  378,  379,  382,  383,  387,    0,    0,
      381,  387,  384,  382,  383,    0,  383,  388,    0,    0,
      384,  388,  385,  386,  425,  425,    0,    0,  382,  383,
      385,  386,    0,  387,  389,  384,  390,  384,  389,  385,
      390,  387,    0,  388,    0,  385,  386,  386,  391,  387,
        0,  388,  391,  392,  393,  394,  387,  392,  393,  394,
      389,    0,  390,    0,    0,  396,  388,  397,  389,  396,
      390,  397,  395,    0,  391,    0,  395,    0,    0,  392,
      393,  394,  391,  389,  390,  390,    0,  392,  393,  394,
        0,  396,  391,  397,    0,    0,  398,  391,  395,  396,

      398,  397,  392,  393,  394,    0,  395,  399,    0,  395,
        0,  399,  396,  400,  396,    0,  397,  400,    0,    0,
      401,  395,  398,  402,  401,  426,  426,  402,    0,    0,
      398,    0,  426,  399,  398,    0,  426,    0,    0,  400,
      428,  399,    0,    0,  428,  398,  401,  400,    0,  402,
        0,  400,  462,  462,  401,  462,  399,  402,  426,  426,
      402,  429,  400,  462,  430,  429,  428,  431,  430,  401,
        0,  431,  402,  432,  428,    0,    0,  432,    0,    0,
      433,    0,    0,    0,  433,  462,  462,  429,    0,  428,
      430,    0,  434,  431,    0,  429,  434,    0,  430,  432,

      477,  431,    0,    0,  477,  435,  433,  432,  477,  435,
      429,  436,  429,  430,  433,  436,  431,  437,  434,    0,
        0,  437,  432,  438,  439,    0,  434,  438,  439,  433,
      477,  435,    0,    0,    0,    0,  441,  436,  434,  435,
      441,  434,  440,  437,    0,  436,  440,    0,    0,  438,
      439,  437,    0,    0,  435,  436,  435,  438,  439,    0,
      436,  437,  441,  442,    0,    0,  437,  442,  440,    0,
      441,    0,  438,  439,  438,    0,  440,  443,  440,  444,
      496,  443,    0,  444,  496,  441,    0,  463,  463,  442,
      463,  440,    0,    0,  463,    0,    0,  442,  463,  464,

      464,    0,  464,  443,    0,  444,  496,  465,  465,  442,
      464,  443,  442,  444,  465,    0,  466,  466,  465,  466,
      463,  463,    0,  466,  467,  467,  443,  466,  444,    0,
      468,  467,  464,  464,  468,  467,    0,    0,    0,  469,
      465,  465,    0,  469,  470,    0,    0,    0,  470,  466,
      466,  471,    0,    0,    0,  471,  468,  467,  467,    0,
        0,    0,    0,  472,  468,  469,    0,  472,  473,    0,
      470,    0,  473,  469,    0,    0,    0,  471,  470,  468,
        0,    0,  474,    0,    0,  471,  474,    0,  469,  472,
        0,  469,  475,  470,  473,  476,  475,  472,    0,  476,

      471,    0,  473,  478,    0,  487,  471,  478,  474,  487,
        0,  478,  472,  487,    0,    0,  474,  473,  475,  484,
        0,  476,    0,  484,    0,    0,  475,  482,  482,  476,
      482,  474,    0,  478,  482,  487,  483,  483,  482,  483,
        0,  475,    0,  483,  476,  484,  485,  483,  486,    0,
      485,  488,  486,  484,  499,  488,    0,  484,  499,  488,
      482,  482,  499,    0,    0,    0,    0,    0,  484,  483,
      483,    0,  485,    0,  486,    0,  491,  491,    0,  491,
      485,  488,  486,  491,  499,  493,  494,  491,    0,  493,
      494,    0,  486,  492,  492,  485,  492,  486,    0,  500,

      492,    0,    0,  500,  492,  497,  497,  500,  497,  491,
      491,  493,  494,    0,  498,  498,  497,    0,    0,  493,
      494,  498,    0,    0,    0,  498,  492,  492,    0,  500,
      501,  501,    0,  501,  493,  494,    0,  501,  497,  497,
        0,  501,  502,  502,    0,  502,    0,  498,  498,  502,
        0,    0,    0,  502,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  501,  501,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  502,  502,  504,  504,  504,
      504,  504,  504,  504,  505,  505,  506,    0,    0,  506,
      506,  506,  506,  507,  507,  507,  507,  507,  507,  507,

      508,    0,    0,  508,  508,  508,  508,  510,    0,  510,
      510,  510,  510,  511,    0,  511,    0,  511,  511,  512,
        0,  512,  512,  512,  512,  512,  513,    0,  513,  513,
      513,  513,  513,  514,  514,  514,  514,  514,  514,  515,
      515,  515,  515,  515,  515,  516,  516,  516,  516,  516,
      516,  516,  517,  517,  517,  517,  517,  517,  517,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,

      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[67] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.l"
#line 4 "lexer.l"
#include<bits/stdc++.h>
#include "parser.tab.hpp"
// #include "node.hpp"
using std::stack;
stack<int> indents;
int dedpos = 0;
int indent = 0;
bool spaceset = false;
int setspace()
{
    spaceset = true;
    if(indent > indents.top()){ 
    indents.push(indent); 
    printf("INDENT\n");
    return 1;
    } 
    int ctr = 0; 
    while(indent < indents.top()){ 
    ctr++; 
    indents.pop(); 
    } 
    if(indents.top() != indent){ 
    printf("Indentation error\n"); 
    return 0;
    } 
    dedpos = ctr; 
    return 0;
}
#line 1140 "lexer.cpp"
#line 1141 "lexer.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 101 "lexer.l"

#line 103 "lexer.l"
 {
    if(dedpos > 0){
        --dedpos;
        yylval.ptr = new node("DEDENT", "DEDENT");
        yylval.val = string("DEDENT");
        return DEDENT;
    }
 }
#line 1372 "lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 504 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2060 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 111 "lexer.l"
{/* Ignore blank lines.*/}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 113 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;}; 
    yylval.ptr = new node("KEYWORD", "async");
    yylval.val = "async";
    return ASYNC;}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 117 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("KEYWORD", "del");
    yylval.val = "del";
    return DEL;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 121 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("KEYWORD", "pass");
    yylval.val = "pass";
    return PASS;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 125 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("KEYWORD", "break");
    yylval.val = "break";
    return BREAK;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 129 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("KEYWORD", "continue");
    yylval.val = "continue";
    return CONTINUE;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 133 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("KEYWORD", "return");
    yylval.val = "return";
    return RETURN;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 137 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("KEYWORD", "raise");
    yylval.val = "raise";
    return RAISE;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 141 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("KEYWORD", "from");
    yylval.val = "from";
    return FROM;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 145 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("KEYWORD", "import");
    yylval.val = "import";
    return IMPORT;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 149 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("KEYWORD", "as");
    yylval.val = "as";
    return AS;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 153 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("KEYWORD", "global");
    yylval.val = "global";
    return GLOBAL;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 157 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("KEYWORD", "nonlocal");
    yylval.val = "nonlocal";
    return NONLOCAL;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 161 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("KEYWORD", "assert");
    yylval.val = "assert";
    return ASSERT;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 165 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("KEYWORD", "if");
    yylval.val = "if";
    return IF;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 169 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("KEYWORD", "elif");
    yylval.val = "elif";
    return ELIF;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 173 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("KEYWORD", "else");
    yylval.val = "else";
    return ELSE;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 177 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("KEYWORD", "for");
    yylval.val = "for";
    return FOR;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 181 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("KEYWORD", "in");
    yylval.val = "in";
    return IN;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 185 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("KEYWORD", "while");
    yylval.val = "while";
    return WHILE;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 189 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("KEYWORD", "try");
    yylval.val = "try";
    return TRY;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 193 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("KEYWORD", "finally");
    yylval.val = "finally";
    return FINALLY;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 197 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("KEYWORD", "with");
    yylval.val = "with";
    return WITH;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 201 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("KEYWORD", "except");
    yylval.val = "except";
    return EXCEPT;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 205 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("KEYWORD", "lambda");
    yylval.val = "lambda";
    return LAMBDA;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 209 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("KEYWORD", "not");
    yylval.val = "not";
    return NOT;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 213 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("KEYWORD", "or");
    yylval.val = "or";
    return OR;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 217 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("KEYWORD", "and");
    yylval.val = "and";
    return AND;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 221 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("KEYWORD", "await");
    yylval.val = "await";
    return AWAIT;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 225 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("KEYWORD", "is");
    yylval.val = "is";
    return IS;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 229 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("KEYWORD", "yield");
    yylval.val = "yield";
    return YIELD;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 233 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("KEYWORD", "True");
    yylval.val = "True";
    return TRUE;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 237 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("KEYWORD", "False");
    yylval.val = "False";
    return FALSE;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 241 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("KEYWORD", "None");
    yylval.val = "None";
    return NONE;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 245 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("KEYWORD", "class");
    yylval.val = "class";
    return CLASS;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 249 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("KEYWORD", "def");
    yylval.val = "def";
    return DEF;}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 254 "lexer.l"
{indent = 0; spaceset = false;
    yylval.ptr = new node("NEWLINE", "NEWLINE");
    yylval.val = "NEWLINE";
    return NEWLINE;}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 258 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 259 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("OPERATOR", "+=");
    yylval.val = "+=";
    return ADDASSIGN;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 263 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("OPERATOR", "-=");
    yylval.val = "-=";
    return SUBASSIGN;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 267 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("OPERATOR", "*=");
    yylval.val = "*=";
    return MULASSIGN;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 271 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("OPERATOR", "/=");
    yylval.val = "/=";
    return DIVASSIGN;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 275 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("OPERATOR", "//=");
    yylval.val = "//=";
    return IDIVASSIGN;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 279 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("OPERATOR", "%=");
    yylval.val = "%=";
    return MODASSIGN;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 283 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("OPERATOR", "@=");
    yylval.val = "@=";
    return ATASSIGN;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 287 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("OPERATOR", "&=");
    yylval.val = "&=";
    return ANDASSIGN;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 291 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("OPERATOR", "|=");
    yylval.val = "|=";
    return ORASSIGN;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 295 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("OPERATOR", "^=");
    yylval.val = "^=";
    return XORASSIGN;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 299 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("OPERATOR", "<<=");
    yylval.val = "<<=";
    return LSASSIGN;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 303 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("OPERATOR", ">>=");
    yylval.val = ">>=";
    return RSASSIGN;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 307 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("OPERATOR", "**=");
    yylval.val = "**=";
    return POWASSIGN;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 311 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("OPERATOR", "->");
    yylval.val = "->";
    return ARROWOP;}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 316 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;}; 
    yylval.ptr = new node("STRING LITERAL", string(yytext, yytext + yyleng));
    yylval.val = string(yytext, yytext + yyleng);
    return STRING;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 320 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("OPERATOR", "**");
    yylval.val = "**";
    return POW;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 324 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("OPERATOR", "//");
    yylval.val = "//";
    return IDIV;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 328 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("OPERATOR", "<<");
    yylval.val = "<<";
    return LEFTSHIFT;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 332 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("OPERATOR", ">>");
    yylval.val = ">>";
    return RIGHTSHIFT;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 336 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("OPERATOR", "<=");
    yylval.val = "<=";
    return LEQ;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 340 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("OPERATOR", ">=");
    yylval.val = ">=";
    return GEQ;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 344 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("OPERATOR", "==");
    yylval.val = "==";
    return EQUAL;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 348 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.ptr = new node("OPERATOR", "!=");
    yylval.val = "!=";
    return NEQ;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 352 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.val = string(yytext, yytext + yyleng);
    yylval.ptr = new node("NUMBER", yylval.val);
    return NUMBER;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 356 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;};
    yylval.val = string(yytext, yytext + yyleng);
    yylval.ptr = new node("IDENTIFIER", yylval.val);
    return NAME;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 360 "lexer.l"
{if(!spaceset){setspace(); for(int i = yyleng - 1; i >= 0; i--) unput(yytext[i]); return -1;}; 
    yylval.val = string(1, yytext[0]);
    yylval.ptr = new node("DELIMITER", yylval.val);
    return yytext[0];}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 365 "lexer.l"
{
    int pos = yyleng - 1;
    while(pos >= 1 and yytext[pos] != ' '){
        unput(yytext[pos]);
        --pos;
    }
    
    if(yytext[pos] == ' ') pos++;
    indent = pos;
    if(setspace()){
        yylval.val = "INDENT";
        yylval.ptr = new node("INDENT", yylval.val);
        return INDENT;
    }
}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 380 "lexer.l"
{return ENDMARKER;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 381 "lexer.l"
ECHO;
	YY_BREAK
#line 1978 "lexer.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 504 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 504 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 503);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 381 "lexer.l"


